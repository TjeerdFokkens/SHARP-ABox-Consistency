import pandas as pd
import numpy as np
from sklearn.neighbors import KernelDensity

import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.gridspec as grid_spec

s = open("dict.txt", "r")
dictionary = eval(s.read())

vars = []
min_value = 100
max_value = 0
for i in range(len(dictionary.items())):
    st1 = "Sample_" + str(i) + " = dictionary[list(dictionary.items())[" + str(i) + "][0]]"
    exec(st1)
    st2 = "Sample_" + str(i)
    exec("min_value = min(min_value,min(" + st2 + "))")
    exec("max_value = max(max_value,max(" + st2 + "))")
    vars.append(st2)

colors = ['#0000ff', '#3300cc', '#660099']

gs = grid_spec.GridSpec(len(vars),1)
fig = plt.figure(figsize=(10,6))

lx=min_value * 0.95 #the left x limit
rx=max_value * 1.04 #the right x limit

i = 0

ax_objs = []
for var in vars:
    exec("x = np.array(" + var + ")")
    x_d = np.linspace(lx,rx, 1000)

    kde = KernelDensity(bandwidth=0.1, kernel='gaussian')
    kde.fit(x[:,None])

    logprob = kde.score_samples(x_d[:, None])

    # creating new axes object
    ax_objs.append(fig.add_subplot(gs[i:i+1, 0:]))

    # plotting the distribution
    ax_objs[-1].plot(x_d, np.exp(logprob),color="#f0f0f0",lw=0.5)
    ax_objs[-1].fill_between(x_d, np.exp(logprob), alpha=1,color=colors[i])


    # setting uniform x and y lims
    ax_objs[-1].set_xlim(lx,rx)
    ax_objs[-1].set_ylim(0,3)

    # make background transparent
    rect = ax_objs[-1].patch
    rect.set_alpha(0)

    # remove borders, axis ticks, and labels
    ax_objs[-1].set_yticklabels([])
    ax_objs[-1].yaxis.set_visible(False)

    if i == len(vars)-1:
        ax_objs[-1].set_xlabel("Inference time (s)", fontsize=14,fontweight="bold")
    else:
        ax_objs[-1].set_xticklabels([])

    spines = ["top","right","left","bottom"]
    for s in spines:
        ax_objs[-1].spines[s].set_visible(False)

    adj_var = var.replace("_"," ")
    ax_objs[-1].text(lx-0.02,0,adj_var,fontweight="bold",fontsize=10,ha="right")


    i += 1

gs.update(hspace=-0.6)

fig.text(0.07,0.85,"Distribution inference times for three different runs",fontsize=18)

plt.tight_layout()
plt.show()
